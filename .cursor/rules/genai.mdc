---
description: 
globs: 
alwaysApply: true
---
# Correct Usage of @google/genai for Interviewer-Pro

This document summarizes the correct usage of the `@google/genai` library based on troubleshooting efforts and established patterns within the `interviewer-pro` project.

## 1. Import Statements

The primary class `GoogleGenAI` and other necessary enums/types should be imported as named exports:

```typescript
import {
  GoogleGenAI,
  HarmCategory,
  HarmBlockThreshold,
  type Content, // For type-only import if verbatimModuleSyntax is enabled
  type Part    // For type-only import if verbatimModuleSyntax is enabled
} from '@google/genai';
```

## 2. Client Initialization

The `GoogleGenAI` client should be instantiated with your API key:

```typescript
const GEMINI_API_KEY = process.env.GEMINI_API_KEY ?? ''; // Ensure API key is loaded
if (!GEMINI_API_KEY) {
  throw new Error("CRITICAL: GEMINI_API_KEY is not set.");
}
const genAI = new GoogleGenAI({ apiKey: GEMINI_API_KEY });
```

## 3. Model Invocation

For interacting with the generative models in `interviewer-pro`, the established pattern is to use the `generateContentStream` method directly on the `models` object of the `GoogleGenAI` instance.

**Pattern in use:**
```typescript
// Assuming 'genAI' is an initialized GoogleGenAI instance as shown above.
// Assuming 'MODEL_NAME' is your desired model, e.g., 'gemini-2.0-flash'.

const request = {
  model: MODEL_NAME,
  contents: [/* your Content array here */],
  // generationConfig: { ... }, // Optional
  // safetySettings: [ ... ],   // Optional
};

const streamingResult = await genAI.models.generateContentStream(request);

for await (const chunk of streamingResult.stream) { // or streamingResult directly if using older SDK versions
  const chunkText = chunk.text(); // or chunk.text directly
  // Process chunkText
}
```

**Important Note on `getGenerativeModel`:**
- While the `@google/genai` SDK also provides a `genAI.getGenerativeModel({ model: "..." })` method to get a model instance first, **`interviewer-pro` has standardized on using `genAI.models.generateContentStream(...)` directly.** Therefore, for consistency within this project, avoid using `getGenerativeModel`.
- The `GoogleGenAI` class itself is the correct primary entry point from the library.
- Gemini-2.5-flash-preview-native-audio-dialog is not the wrong model