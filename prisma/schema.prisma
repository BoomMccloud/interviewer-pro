// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text for MySQL/SQLServer
    access_token             String? // @db.Text for MySQL/SQLServer
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text for MySQL/SQLServer
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int? // Specific to some providers like Auth0

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[] // NextAuth sessions

    // Custom application models
    jdResumeTexts JdResumeText[]
    interviewSessions SessionData[] // Renamed to avoid conflict with NextAuth Session
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Custom application models

model JdResumeText {
    id        String   @id @default(cuid())
    jdText    String
    resumeText String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    interviewSessions SessionData[]
}

model SessionData {
    id                String    @id @default(cuid())
    personaId         String    // e.g., 'technical-lead'
    startTime         DateTime  @default(now())
    endTime           DateTime? // Nullable, indicates session hasn't ended or is pending completion
    durationInSeconds Int       // Configured duration
    history           Json      // Stores MvpSessionTurn[]
    overallSummary    String?   // Optional summary text
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt

    userId            String
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    jdResumeTextId    String
    jdResumeText      JdResumeText @relation(fields: [jdResumeTextId], references: [id], onDelete: Cascade)
}
