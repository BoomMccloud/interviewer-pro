generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[] // Old, for next-auth
  interviewSessions     SessionData[] // New, for app data
  jdResumeTexts         JdResumeText[]

  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SessionData {
  id                   String    @id @default(cuid())
  status               String    @default("active") // e.g., active, completed, paused
  personaId            String
  durationInSeconds    Int
  questionSegments     Json // Will store an array of QuestionSegment
  currentQuestionIndex Int       @default(0)
  overallSummary       String?
  
  jdResumeTextId String?
  jdResumeText   JdResumeText? @relation(fields: [jdResumeTextId], references: [id])

  startTime DateTime?
  endTime   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model JdResumeText {
  id                String        @id @default(cuid())
  jdText            String
  resumeText        String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviewSessions SessionData[]
}
